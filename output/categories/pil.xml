<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>En borrador permanente (PIL)</title><link>http://www.juanjoconti.com.ar/</link><description></description><atom:link href="http://www.juanjoconti.com.ar/categories/pil.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Tue, 23 Jun 2015 01:31:23 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Visión robótica</title><link>http://www.juanjoconti.com.ar/posts/2012/05/24/vision-robotica.html</link><dc:creator>Juanjo</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Hace un par de noches me escribió mi amigo &lt;a href="http://www.jjlorenzatti.com.ar/" target="_blank"&gt;Joel&lt;/a&gt;. Es licenciado en Filosofía y está haciendo un doctorado. Me cuenta que está leyendo un libro llamado &lt;a href="http://pinker.wjh.harvard.edu/books/htmw/" target="_blank"&gt;How the Mind Works&lt;/a&gt;, de &lt;a href="http://en.wikipedia.org/wiki/Steven_Pinker" target="_blank"&gt;Steven Pinker&lt;/a&gt;, quien actualmente se desempeña en la cátedra de psicología del MIT y es uno de los principales referentes de la psicología evolucionista.&lt;/p&gt;
&lt;p&gt;En el libro, contrastando con lo que muestran los directores de cine en las películas, Steven dice:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;Si pudiéramos ver el mundo con los ojos de un robot, su aspecto no se parecería al fotograma de una película a base de crucecillas, sino que se asemejaría más a esto:
&lt;p&gt;225 221 216 219 219 214 207 218 219 220 207 155 136 135&lt;/p&gt;
&lt;p&gt;213 206 213 223 208 217 223 221 223 216 195 156 141 130&lt;/p&gt;
&lt;p&gt;206 217 210 216 224 223 228 230 234 216 207 157 136 132&lt;/p&gt;
&lt;p&gt;211 213 221 223 220 222 237 216 219 220 176 149 137 132&lt;/p&gt;
&lt;p&gt;221 229 218 230 228 214 213 209 198 224 161 140 133 127&lt;/p&gt;
&lt;p&gt;220 219 224 220 219 215 215 206 206 221 159 143 133 131&lt;/p&gt;
&lt;p&gt;221 215 211 214 220 218 221 212 218 204 148 141 131 130&lt;/p&gt;
&lt;p&gt;214 211 211 214 220 218 221 212 218 204 148 141 131 130&lt;/p&gt;
&lt;p&gt;211 208 223 213 216 226 231 230 241 199 153 141 136 125&lt;/p&gt;
&lt;p&gt;200 224 219 215 217 224 232 241 240 211 150 139 128 132&lt;/p&gt;
&lt;p&gt;204 206 208 205 233 241 241 252 242 192 151 141 133 130&lt;/p&gt;
&lt;p&gt;200 205 201 216 232 248 255 246 231 210 149 141 132 126&lt;/p&gt;
&lt;p&gt;191 194 209 238 245 255 249 235 238 197 146 139 130 132&lt;/p&gt;
&lt;p&gt;189 199 200 227 239 237 235 236 247 192 145 142 124 133&lt;/p&gt;
&lt;p&gt;198 196 209 211 210 215 236 240 232 177 142 137 135 124&lt;/p&gt;
&lt;p&gt;198 203 205 208 211 224 226 240 210 160 139 132 129 130&lt;/p&gt;
&lt;p&gt;216 209 214 220 210 231 245 219 169 143 148 129 128 136&lt;/p&gt;
&lt;p&gt;211 210 217 218 214 227 244 221 162 140 139 129 133 131&lt;/p&gt;
&lt;p&gt;215 210 217 218 214 227 244 221 162 140 139 129 133 131&lt;/p&gt;
&lt;p&gt;219 220 211 208 205 209 240 217 154 141 127 130 124 142&lt;/p&gt;
&lt;p&gt;229 224 212 214 220 229 234 208 151 145 128 128 142 122&lt;/p&gt;
&lt;p&gt;252 224 222 224 233 244 228 213 143 141 135 128 131 129&lt;/p&gt;
&lt;p&gt;255 235 230 249 253 240 228 193 147 139 132 128 136 125&lt;/p&gt;
&lt;p&gt;250 245 238 245 246 235 235 190 139 136 134 135 126 130&lt;/p&gt;
&lt;p&gt;240 238 233 232 235 255 246 168 156 144 129 127 136 134&lt;/p&gt;
&lt;p&gt;Cada número representa la luminosidad de una de las millones de manchas que forman el campo visual. Los números menores corresponden a las manchas más oscuras, y los mayores, a las más claras.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Joel me preguntaba si se me ocurría una forma sencilla de convertir estos números en una imagen. El ejercicio es válido y un buen ejemplo de la biblioteca &lt;a href="http://www.pythonware.com/products/pil/" target="_blank"&gt;PIL&lt;/a&gt;.&lt;/p&gt;
&lt;pre lang="python"&gt;from PIL import Image

image = Image.new('L', (14,25))

imageMap = image.load()

f = open('vision1.txt')

lines = f.readlines()



for i, l in enumerate(lines):

    for j, v in enumerate(l.split()):

        n = int(v)

        imageMap[j, i] = n



image.save('vision1.gif')

image.show()&lt;/pre&gt;

&lt;p&gt;Y esto es (ampliado) lo que está mirando el robot de Steven:&lt;/p&gt;
&lt;p&gt;&lt;img class="size-full wp-image-4054" title="Visión robótica con PIL (ampliada)" src="http://www.juanjoconti.com.ar/wp-content/uploads/2012/05/Screenshot-vision1.gif.png" alt="Visión robótica con PIL (ampliada)" width="440" height="454"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update: &lt;/strong&gt;la versión de Milton usando Octave:&lt;/p&gt;
&lt;pre lang="octave"&gt;matriz = dlmread('vision1.txt');

matrizNormalizada = matriz ./ max(max(matriz));

imshow(matrizNormalizada);&lt;/pre&gt;

&lt;p&gt;&lt;img class="size-full wp-image-4050" title="Visión robótica generado con Octave" src="http://www.juanjoconti.com.ar/wp-content/uploads/2012/05/Pantallazo-de-2012-05-25-11_44_24.png" alt="Visión robótica generado con Octave" width="562" height="467"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update 2:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Joel &lt;a href="http://www.jjlorenzatti.com.ar/2012/05/26/vision-de-robot/" target="_blank"&gt;implementó una solución&lt;/a&gt; muy ingeniosa utilizando una planilla de cálculos:&lt;/p&gt;
&lt;p&gt;&lt;img class="size-full wp-image-4052" title="Visión Robótica con planilla de cálculo" src="http://www.juanjoconti.com.ar/wp-content/uploads/2012/05/Robot-View-Excel.png" alt="Visión Robótica con planilla de cálculo" width="291" height="520"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Aprendiendo Python</category><category>How the Mind works</category><category>IA</category><category>PIL</category><category>Steven Pinker</category><guid>http://www.juanjoconti.com.ar/posts/2012/05/24/vision-robotica.html</guid><pubDate>Thu, 24 May 2012 00:37:53 GMT</pubDate></item><item><title>El segundo color predominante: PIL</title><link>http://www.juanjoconti.com.ar/posts/2009/03/26/el-segundo-color-predominante-pil.html</link><dc:creator>Juanjo</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Hace unas semanas necesité hacer un script en Python que genere algunas decenas de imágenes. Básicamente, se tiene como entrada imágenes como estas:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/die4side.png"&gt;&lt;img class="aligncenter size-full wp-image-1354" title="die4side" src="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/die4side.png" alt="" width="100" height="100"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/die8side.png"&gt;&lt;img class="aligncenter size-medium wp-image-1355" title="die8side" src="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/die8side.png" alt="" width="100" height="100"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(un borde con alguna forma y un color en un fondo blanco)&lt;/p&gt;
&lt;p&gt;Las imágenes generadas tienen que tener ciertos números en el centro, pintados en cada caso del mismo color que el borde:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/d20_12.png"&gt;&lt;img class="aligncenter size-full wp-image-1357" title="d20_12" src="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/d20_12.png" alt="" width="100" height="100"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/d8_1.png"&gt;&lt;img class="aligncenter size-full wp-image-1356" title="d8_1" src="http://www.juanjoconti.com.ar/wp-content/uploads/2009/03/d8_1.png" alt="" width="100" height="100"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La primer parte del script tiene que determinar el segundo color predominante de la imagen (el primero es el blanco), esta es la forma en que lo hice usando &lt;a title="Python Imaging Library (PIL)" href="http://www.pythonware.com/products/pil/" target="_blank"&gt;PIL&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre&gt;def get_color(image):
&lt;pre class="code literal-block"&gt;colors = image.getcolors()  # colors is a list of (count, color)

colors.sort(lambda y,x: cmp(x[0], y[0])) # bigger count first

c = colors.pop(0)

while white(c): # find the non-white color most used in the image

    c = colors.pop(0)

return c[1]
&lt;/pre&gt;


&lt;p&gt;def white(color):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;color = color[1]

return color[0] == 255 and color[1] == 255 and color[2] == 255&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>Aprendiendo Python</category><category>PIL</category><guid>http://www.juanjoconti.com.ar/posts/2009/03/26/el-segundo-color-predominante-pil.html</guid><pubDate>Thu, 26 Mar 2009 09:00:49 GMT</pubDate></item></channel></rss>